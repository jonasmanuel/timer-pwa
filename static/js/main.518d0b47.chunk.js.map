{"version":3,"sources":["TimerCard.tsx","Report.tsx","ProjectCard.tsx","RecordTable.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","ServiceWorkerWrapper.tsx","index.tsx"],"names":["TimerCard","onChange","onStop","timer","delta","paused","Date","getTime","startTime","useState","elapsedTime","currentTime","setCurrentTime","duration","moment","useEffect","timeOut","setInterval","clearInterval","Card","sx","width","margin","CardContent","Typography","variant","gutterBottom","name","style","display","alignItems","format","trim","flex","IconButton","onClick","Object","assign","Report","records","sort","a","b","recordedDate","cws","_","map","r","uniq","value","byCw","groupBy","snackBarOpen","setSnackBarOpen","cw","cwRecords","get","projects","project","psp","uniqBy","byProject","marginLeft","TableContainer","component","Paper","theme","spacing","Table","TableHead","TableRow","TableCell","TableBody","daySums","record","getDay","recordedTime","dayStrings","sum","Math","round","asHours","toLocaleString","Tooltip","title","navigator","clipboard","writeText","Snackbar","open","onClose","message","ProjectCard","createTimer","onClicked","height","cursor","RecordTable","onDelete","onArchive","showArchived","setShowArchived","FormControlLabel","control","Checkbox","checked","x","label","filter","archived","id","App","timers","setTimers","setRecords","newName","setNewName","buttonEnabled","setButtonEnabled","nextId","setNextId","setProjects","projectName","setProjectName","projectPsp","setProjectPsp","projectButtonEnabled","setProjectButtonEnabled","length","localStorage","setItem","JSON","stringify","storageTimers","storageRecords","storageId","timerData","getItem","parse","projectData","curTimers","newTimer","pjs","moved","pj","push","nid","concat","changedIndex","findIndex","t","timersChanged","slice","recs","flexWrap","TextField","e","target","newProject","createProject","disabled","reverse","rec","archive","recordsChanged","isLocalhost","Boolean","window","location","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ServiceWorkerWrapper","React","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","reloadPage","postMessage","type","anchorOrigin","vertical","horizontal","action","Button","color","size","ReactDOM","render","StrictMode","document","getElementById","serviceWorkerRegistration"],"mappings":"yYASaA,EAAY,SAAC,GAI2D,IAHnFC,EAGkF,EAHlFA,SACAC,EAEkF,EAFlFA,OACGC,EAC+E,iBAC5EC,EAAQD,EAAME,OAAS,GAAI,IAAIC,MAAOC,UAAYJ,EAAMK,UAC9D,EAAsCC,mBAAiBN,EAAMO,YAAcN,GAA3E,mBAAOO,EAAP,KAAoBC,EAApB,KACMC,EAAWC,WAAgBH,EAAa,gBAC9CI,qBAAU,WACR,IAAIC,EAAiC,KAMrC,OALKb,EAAME,SACTW,EAAUC,aAAY,WACpBL,EAAeT,EAAMO,aAAc,IAAIJ,MAAOC,UAAYJ,EAAMK,aAC/D,MAEE,WACW,OAAZQ,GAAkBE,cAAcF,MAErC,CAACb,IAiBJ,OACE,cAACgB,EAAA,EAAD,CAAMC,GAAI,CAAEC,MAAO,IAAKC,OAAQ,GAAhC,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,SACGvB,EAAMwB,OAET,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAA3C,UACE,cAACN,EAAA,EAAD,UAAaX,EAASkB,OAAO,WAAY,CAAEC,MAAM,MACjD,qBAAKJ,MAAO,CAAEK,KAAM,KACpB,cAACC,EAAA,EAAD,CAAYC,QAzBL,WACb,IAAMzB,EAA2BP,EAA3BO,YAAaF,EAAcL,EAAdK,UACdL,EAAME,OAGTG,GAAY,IAAIF,MAAOC,UAFvBG,IAAe,IAAIJ,MAAOC,UAAYJ,EAAMK,UAI9CP,EAASmC,OAAOC,OAAOlC,EAAO,CAAEE,QAASF,EAAME,OAAQK,cAAaF,gBAkB9D,SAA8BL,EAAME,OAAS,cAAC,IAAD,IAAoB,cAAC,IAAD,MACjE,cAAC6B,EAAA,EAAD,CAAYC,QAjBP,WACX,IAAMzB,EAAgBP,EAAhBO,YACDP,EAAME,SACTK,IAAe,IAAIJ,MAAOC,UAAYJ,EAAMK,WAE9CN,EAAOkC,OAAOC,OAAOlC,EAAO,CAAEO,kBAYxB,SACE,cAAC,IAAD,e,6JCpCC4B,EAAS,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QACvBA,EAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,aAAeD,EAAEC,gBAC1C,IAAMC,EAAMC,IAAEN,GACXO,KAAI,SAACC,GAAD,OAAOjC,IAAO,IAAIR,KAAKyC,EAAEJ,eAAeZ,OAAO,SACnDiB,OACAC,QACGC,EAAOL,IAAEN,GAASY,SAAQ,SAACJ,GAAD,OAAOjC,IAAO,IAAIR,KAAKyC,EAAEJ,eAAeZ,OAAO,SAC/E,EAAwCtB,oBAAkB,GAA1D,mBAAO2C,EAAP,KAAqBC,EAArB,KACA,OACE,mCACGT,EAAIE,KAAI,SAACQ,GACR,IAAMC,EAAYL,EAAKM,IAAIF,GACrBG,EAAWZ,IAAEU,GAChBT,KAAI,SAACC,GAAD,OAAQA,EAAEW,QAAUX,EAAEW,QAAU,CAAE/B,KAAMoB,EAAEpB,KAAMgC,IAAK,OACzDC,OAAO,QACPX,QACGY,EAAYhB,IAAEU,GAAWJ,QAAQ,QACvC,OACE,qCACE,qBAAIvB,MAAO,CAAEkC,WAAY,GAAzB,eAAiCR,KACjC,cAACS,EAAA,EAAD,CAAgBC,UAAWC,IAAO7C,GAAI,CAAEE,OAAQ,EAAGD,MAAO,SAAC6C,GAAD,4BAA0BA,EAAMC,QAAQ,GAAxC,OAA1D,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,kBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,SAGJ,cAACC,EAAA,EAAD,UACGf,EAASX,KAAI,SAACY,GACb,IADyB,EACnBnB,EAAUsB,EAAUL,IAAIE,EAAQ/B,MAChC8C,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAFV,cAGJlC,GAHI,IAGzB,2BAA8B,CAAC,IAApBmC,EAAmB,QAE5BD,EADY,IAAInE,KAAKoE,EAAO/B,cAAcgC,SAAW,IACrCD,EAAOE,cALA,8BAOzB,IAAMC,EAAaJ,EAAQ3B,KAAI,SAACgC,GAAD,OAC5BC,KAAKC,MAAuD,GAAjDlE,IAAOD,SAASiE,EAAK,gBAAgBG,WAAkB,IAAIC,oBAEzE,OACE,eAACZ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAYb,EAAQC,MACpB,cAACY,EAAA,EAAD,UAAYb,EAAQ/B,OACpB,cAAC4C,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,UAAYM,EAAW,KACvB,cAACN,EAAA,EAAD,UAAYM,EAAW,KACvB,cAACN,EAAA,EAAD,UAAYM,EAAW,KACvB,cAACN,EAAA,EAAD,UAAYM,EAAW,KACvB,cAACN,EAAA,EAAD,UAAYM,EAAW,KACvB,eAACN,EAAA,EAAD,WACE,cAACY,EAAA,EAAD,CAASC,MAAM,cAAf,SACE,cAAClD,EAAA,EAAD,CACEC,QAAS,WACPkD,UAAUC,UAAUC,UAApB,UACKV,EAAW,GADhB,aACuBA,EAAW,GADlC,aACyCA,EAAW,GADpD,aAC2DA,EAAW,GADtE,aAC6EA,EAAW,KAExFxB,GAAgB,IALpB,SAQE,cAAC,IAAD,QAGJ,cAAC8B,EAAA,EAAD,CAASC,MAAM,sBAAf,SACE,cAAClD,EAAA,EAAD,CACEC,QAAS,WACPkD,UAAUC,UAAUC,UAApB,UACK7B,EAAQC,IADb,iBACyBkB,EAAW,GADpC,aAC2CA,EAAW,GADtD,aAC6DA,EAAW,GADxE,aAC+EA,EAAW,GAD1F,aACiGA,EAAW,KAE5GxB,GAAgB,IALpB,SAQE,cAAC,IAAD,aA/BOK,EAAQ/B,gBAyCjC,cAAC6D,EAAA,EAAD,CAAUC,KAAMrC,EAAcsC,QAAS,kBAAMrC,GAAgB,IAAQsC,QAAQ,iCCvG5EC,EAAc,SAAC,GAMrB,IALMC,EAKP,EALJC,UACApC,EAII,EAJJA,QAKA,OACE,cAACvC,EAAA,EAAD,CACEgB,QAAS,kBAAM0D,EAAYnC,IAC3BtC,GAAI,CAAEE,OAAQ,EAAGyE,OAAQ,IAAK1E,MAAO,IAAK2E,OAAQ,WAFpD,SAKE,cAACzE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,SACGgC,EAAQ/B,UAJR+B,EAAQC,M,qECIZ,SAASsC,GAAT,GAQH,IAPF1D,EAOC,EAPDA,QACA2D,EAMC,EANDA,SACAC,EAKC,EALDA,UAMA,EAAwC1F,oBAAkB,GAA1D,mBAAO2F,EAAP,KAAqBC,EAArB,KACA,OACE,cAACtC,EAAA,EAAD,CAAgBC,UAAWC,IAAO7C,GAAI,CAAEE,OAAQ,EAAGD,MAAO,SAAC6C,GAAD,4BAA0BA,EAAMC,QAAQ,GAAxC,OAA1D,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,6BACA,cAACA,EAAA,EAAD,UACE,cAAC+B,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,CAAUC,QAASL,EAAcnG,SAAU,kBAAMoG,GAAgB,SAACK,GAAD,OAAQA,QAClFC,MAAM,yBAKd,cAACnC,EAAA,EAAD,UACGjC,EACEqE,QAAO,SAAC7D,GAAD,OAAOqD,IAAiBrD,EAAE8D,YACjC/D,KAAI,SAAC4B,GACJ,OACE,eAACJ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAYG,EAAO/C,OACnB,eAAC4C,EAAA,EAAD,WACGQ,KAAKC,MAAuE,GAAjElE,IAAOD,SAAS6D,EAAOE,aAAc,gBAAgBK,WAAkB,GADrF,QAGA,eAACV,EAAA,EAAD,kBAAgBzD,IAAO,IAAIR,KAAKoE,EAAO/B,eAAeZ,OAAO,0BAC7D,eAACwC,EAAA,EAAD,WACE,cAACrC,EAAA,EAAD,CAAYC,QAAS,kBAAM+D,EAASxB,IAApC,SACE,cAAC,IAAD,MAEDA,EAAOmC,SACN,cAAC3E,EAAA,EAAD,CAAYC,QAAS,kBAAMgE,EAAUzB,GAAQ,IAA7C,SACE,cAAC,IAAD,MAGF,cAACxC,EAAA,EAAD,CAAYC,QAAS,kBAAMgE,EAAUzB,GAAQ,IAA7C,SACE,cAAC,IAAD,WAhBOA,EAAOoC,cC6JvBC,OA9Kf,WACE,MAA4BtG,mBAAkB,IAA9C,mBAAOuG,EAAP,KAAeC,EAAf,KACA,EAA8BxG,mBAAmB,IAAjD,mBAAO8B,EAAP,KAAgB2E,EAAhB,KACA,EAA8BzG,mBAAiB,IAA/C,mBAAO0G,EAAP,KAAgBC,EAAhB,KACA,EAA0C3G,oBAAkB,GAA5D,mBAAO4G,EAAP,KAAsBC,EAAtB,KACA,EAA4B7G,mBAAiB,GAA7C,mBAAO8G,EAAP,KAAeC,EAAf,KACA,EAAgC/G,mBAAoB,IAApD,mBAAOgD,EAAP,KAAiBgE,EAAjB,KACA,EAAsChH,mBAAiB,IAAvD,mBAAOiH,EAAP,KAAoBC,EAApB,KACA,EAAoClH,mBAAiB,IAArD,mBAAOmH,EAAP,KAAmBC,EAAnB,KACA,EAAwDpH,oBAAkB,GAA1E,mBAAOqH,EAAP,KAA6BC,EAA7B,KAEAhH,qBAAU,YACJiG,EAAOgB,OAAS,GAAKzF,EAAQyF,OAAS,IACxCC,aAAaC,QACX,YACAC,KAAKC,UAAU,CAAEC,cAAerB,EAAQsB,eAAgB/F,EAASgG,UAAWhB,OAG/E,CAACP,EAAQzE,EAASgF,IACrBxG,qBAAU,WACR,IAAIyH,EAAYP,aAAaQ,QAAQ,aACrC,GAAID,EAAW,CACb,MAAmDL,KAAKO,MAAMF,GAAxDH,EAAN,EAAMA,cAAeC,EAArB,EAAqBA,eAAgBC,EAArC,EAAqCA,UAKrCtB,EAAUoB,GACVb,EAAUe,GACVrB,EAAWoB,GAEb,IAAMK,EAAcV,aAAaQ,QAAQ,eACzC,GAAIE,EAAa,CACf,IAAMlF,EAAa0E,KAAKO,MAAMC,GAAxBlF,SACNgE,EAAYhE,MAEb,CAACwD,EAAWC,EAAYM,EAAWC,IAEtC1G,qBAAU,WACJ0C,EAASuE,OAAS,GAAGC,aAAaC,QAAQ,cAAeC,KAAKC,UAAU,CAAE3E,gBAC7E,CAACA,IAEJ,IAAMoC,EAAc,SAACnC,GACnBuD,GAAU,SAAC2B,GACT,IAAMC,EAAkB,CACtB/B,GAAIS,EACJ5F,KAAMwF,EACN9G,QAAQ,EACRK,YAAa,EACbF,WAAW,IAAIF,MAAOC,WAaxB,OAXImD,IACFmF,EAASlH,KAAO+B,EAAQ/B,KACxBkH,EAASnF,QAAUA,EACnB+D,GAAY,SAACqB,GACX,IAAMC,EAAQD,EAAIlC,QAAO,SAACoC,GAAD,OAAQA,EAAGrF,MAAQD,EAAQC,OAEpD,OADAoF,EAAME,KAAKvF,GACJqF,MAGX3B,EAAW,IACXI,GAAU,SAAC0B,GAAD,OAASA,EAAM,KAClBN,EAAUO,OAAON,OA2BtB5I,EAAW,SAACE,GAChB,IAAMiJ,EAAepC,EAAOqC,WAAU,SAACC,GAAD,OAAOA,EAAExC,KAAO3G,EAAM2G,MAC5D,GAAIsC,GAAgB,EAAG,CACrB,IAAMG,EAAgBvC,EAAOwC,MAAM,GACnCD,EAAcH,GAAgBjJ,EAC9B8G,EAAUsC,KAIRrJ,EAAS,SAACC,GACd8G,EAAUD,EAAOJ,QAAO,SAAC0C,GAAD,OAAOA,EAAExC,KAAO3G,EAAM2G,OAC9CI,GAAW,SAACuC,GAAD,OACTA,EAAKN,OAAO,CACVrC,GAAI3G,EAAM2G,GACVnF,KAAMxB,EAAMwB,KACZiD,aAAczE,EAAMO,YACpBiC,cAAc,IAAIrC,MAAOC,UACzBmD,QAASvD,EAAMuD,cAkBrB,OACE,qCACE,oBAAI9B,MAAO,CAAEkC,WAAY,GAAzB,sBACA,sBAAKlC,MAAO,CAAEC,QAAS,OAAQ6H,SAAU,QAAzC,UACE,cAACvI,EAAA,EAAD,CAAMC,GAAI,CAAEE,OAAQ,EAAGD,MAAO,KAA9B,SACE,eAACE,EAAA,EAAD,WACE,cAACoI,EAAA,EAAD,CACEhD,MAAM,eACNlF,QAAQ,WACRwB,MAAOyE,EACPzH,SAAU,SAAC2J,GAAD,OAtDM3G,EAsDoB2G,EAAEC,OAAO5G,MArDvD8E,EAAwB9E,EAAMjB,OAAOgG,OAAS,GAAKJ,EAAWI,OAAS,QACvEL,EAAe1E,EAAMjB,QAFI,IAACiB,KAwDlB,cAAC0G,EAAA,EAAD,CACEhD,MAAM,cACNlF,QAAQ,WACRwB,MAAO2E,EACP3H,SAAU,SAAC2J,GAAD,OAvDK3G,EAuDoB2G,EAAEC,OAAO5G,MAtDtD8E,EAAwB9E,EAAMjB,OAAOgG,OAAS,GAAKN,EAAYM,OAAS,QACxEH,EAAc5E,EAAMjB,QAFI,IAACiB,KAyDjB,cAACf,EAAA,EAAD,CAAYC,QAAS,kBA5ET,WACpB,IAAM2H,EAAsB,CAC1BnI,KAAM+F,EACN/D,IAAKiE,GAEPC,EAAc,IACdF,EAAe,IACfF,GAAY,SAACqB,GAAD,OAASA,EAAIK,OAAOW,MAqEGC,IAAiBC,UAAWlC,EAAvD,SACE,cAAC,IAAD,WAILrE,EACE+F,MAAM,GACNS,UACAnH,KAAI,SAACY,GAAD,OACH,cAAC,EAAD,CAAaoC,UAAWD,EAAanC,QAASA,UAGpD,oBAAI9B,MAAO,CAAEkC,WAAY,GAAzB,oBACA,sBAAKlC,MAAO,CAAEC,QAAS,OAAQ6H,SAAU,QAAzC,UACE,cAACvI,EAAA,EAAD,CAAMC,GAAI,CAAEE,OAAQ,EAAGD,MAAO,KAA9B,SACE,eAACE,EAAA,EAAD,WACE,cAACoI,EAAA,EAAD,CAAWhD,MAAM,OAAOlF,QAAQ,WAAWwB,MAAOkE,EAASlH,SAAU,SAAC2J,GAAD,OAnF1D3G,EAmF6E2G,EAAEC,OAAO5G,MAlFzGqE,EAAiBrE,EAAMjB,OAAOgG,OAAS,QACvCZ,EAAWnE,GAFO,IAACA,KAoFX,cAACf,EAAA,EAAD,CAAYC,QAAS,kBAAM0D,KAAemE,UAAW3C,EAArD,SACE,cAAC,IAAD,WAILL,EAAOlE,KAAI,SAAC3C,GAAD,OACV,cAAC,EAAD,2BAA8BA,GAA9B,IAAqCF,SAAUA,EAAUC,OAAQA,IAAjDC,EAAM2G,UAG1B,cAACb,GAAD,CAAa1D,QAASA,EAAS2D,SAzDd,SAACxB,GACpBwC,GAAW,SAACuC,GAAD,OAAUA,EAAK7C,QAAO,SAACsD,GAAD,OAASA,EAAIpD,KAAOpC,EAAOoC,UAwDHX,UArDrC,SAACzB,EAAgByF,GACrCzF,EAAOmC,SAAWsD,EAClB,IAAMf,EAAe7G,EAAQ8G,WAAU,SAACtG,GAAD,OAAOA,EAAE+D,KAAOpC,EAAOoC,MAC9D,GAAIsC,GAAgB,EAAG,CACrB,IAAMgB,EAAiB7H,EAAQiH,MAAM,GACrCY,EAAehB,GAAgB1E,EAC/BwC,EAAWkD,OAgDX,cAAC,EAAD,CAAQ7H,QAASA,QC9LjB8H,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAQ5B,SAASC,GAASC,GACvB,GAA6C,kBAAmBvF,UAAW,CAGzE,GADkB,IAAIwF,IAAIC,aAAwBP,OAAOC,SAASO,MACpDC,SAAWT,OAAOC,SAASQ,OAIvC,OAGFT,OAAOU,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMJ,aAAN,sBAEPT,KAgEV,SAAiCa,EAAeN,GAE9CO,MAAMD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAACC,GAEL,IAAMC,EAAcD,EAASF,QAAQ5H,IAAI,gBAEnB,MAApB8H,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CpG,UAAUqG,cAAcC,MAAMN,MAAK,SAACO,GAClCA,EAAaC,aAAaR,MAAK,WAC7Bd,OAAOC,SAASsB,eAKpBC,GAAgBb,EAAON,MAG1BoB,OAAM,WACLC,QAAQC,IAAI,oEAtFVC,CAAwBjB,EAAON,GAI/BvF,UAAUqG,cAAcC,MAAMN,MAAK,WACjCY,QAAQC,IACN,+GAMJH,GAAgBb,EAAON,OAM/B,SAASmB,GAAgBb,EAAeN,GACtCvF,UAAUqG,cACPf,SAASO,GACTG,MAAK,SAACO,GACLA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfnH,UAAUqG,cAAce,YAI1BR,QAAQC,IACN,+GAKEtB,GAAUA,EAAO8B,UACnB9B,EAAO8B,SAASd,KAMlBK,QAAQC,IAAI,sCAGRtB,GAAUA,EAAO+B,WACnB/B,EAAO+B,UAAUf,WAO5BI,OAAM,SAACY,GACNX,QAAQW,MAAM,4CAA6CA,MCjGjE,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,UC6BCO,GAlCkB,WAC/B,MAAoCC,IAAM7M,UAAS,GAAnD,mBAAO8M,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,IAAM7M,SAA+B,MAA/E,mBAAOgN,EAAP,KAAsBC,EAAtB,KAEMC,EAAa,SAAC/B,GAClB4B,GAAc,GACdE,EAAiB9B,EAAagC,UAGhC7M,qBAAU,WACR2K,GAAuB,CAAEgB,SAAUiB,MAClC,IAEH,IAAME,EAAa,WACJ,OAAbJ,QAAa,IAAbA,KAAeK,YAAY,CAAEC,KAAM,iBACnCP,GAAc,GACdjD,OAAOC,SAASsB,UAGlB,OACE,cAACtG,EAAA,EAAD,CACEC,KAAM8H,EACN5H,QAAQ,8BACRxD,QAAS0L,EACTG,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,OACE,cAACC,GAAA,EAAD,CAAQC,MAAM,UAAUC,KAAK,QAAQnM,QAAS0L,EAA9C,uBCtBRU,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,GAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,SAM1BC,KAKA/B,GAAgBZ,QAAQC,O","file":"static/js/main.518d0b47.chunk.js","sourcesContent":["import { Card, CardContent, IconButton, Typography } from \"@mui/material\";\r\nimport * as moment from \"moment\";\r\nimport \"moment-duration-format\";\r\nimport { useEffect, useState } from \"react\";\r\nimport PauseIcon from \"@mui/icons-material/Pause\";\r\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\r\nimport StopIcon from \"@mui/icons-material/Stop\";\r\nimport { Timer } from \"./App\";\r\n\r\nexport const TimerCard = ({\r\n  onChange,\r\n  onStop,\r\n  ...timer\r\n}: Timer & { onChange: (timer: Timer) => void; onStop: (timer: Timer) => void }) => {\r\n  const delta = timer.paused ? 0 : new Date().getTime() - timer.startTime;\r\n  const [currentTime, setCurrentTime] = useState<number>(timer.elapsedTime + delta);\r\n  const duration = moment.duration(currentTime, \"milliseconds\");\r\n  useEffect(() => {\r\n    let timeOut: null | NodeJS.Timeout = null;\r\n    if (!timer.paused) {\r\n      timeOut = setInterval(() => {\r\n        setCurrentTime(timer.elapsedTime + new Date().getTime() - timer.startTime);\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (timeOut !== null) clearInterval(timeOut);\r\n    };\r\n  }, [timer]);\r\n  const change = () => {\r\n    let { elapsedTime, startTime } = timer;\r\n    if (!timer.paused) {\r\n      elapsedTime += new Date().getTime() - timer.startTime;\r\n    } else {\r\n      startTime = new Date().getTime();\r\n    }\r\n    onChange(Object.assign(timer, { paused: !timer.paused, elapsedTime, startTime }));\r\n  };\r\n  const stop = () => {\r\n    let { elapsedTime } = timer;\r\n    if (!timer.paused) {\r\n      elapsedTime += new Date().getTime() - timer.startTime;\r\n    }\r\n    onStop(Object.assign(timer, { elapsedTime }));\r\n  };\r\n  return (\r\n    <Card sx={{ width: 200, margin: 1 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {timer.name}\r\n        </Typography>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Typography>{duration.format(\"hh:mm:ss\", { trim: false })}</Typography>\r\n          <div style={{ flex: 1 }} />\r\n          <IconButton onClick={change}>{timer.paused ? <PlayArrowIcon /> : <PauseIcon />}</IconButton>\r\n          <IconButton onClick={stop}>\r\n            <StopIcon />\r\n          </IconButton>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import {\r\n  IconButton,\r\n  Paper,\r\n  Snackbar,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { Record } from \"./App\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport FileCopyIcon from \"@mui/icons-material/FileCopy\";\r\nimport { useState } from \"react\";\r\n\r\nexport const Report = ({ records }: { records: Record[] }) => {\r\n  records.sort((a, b) => a.recordedDate - b.recordedDate);\r\n  const cws = _(records)\r\n    .map((r) => moment(new Date(r.recordedDate)).format(\"WW\"))\r\n    .uniq()\r\n    .value();\r\n  const byCw = _(records).groupBy((r) => moment(new Date(r.recordedDate)).format(\"WW\"));\r\n  const [snackBarOpen, setSnackBarOpen] = useState<boolean>(false);\r\n  return (\r\n    <>\r\n      {cws.map((cw) => {\r\n        const cwRecords = byCw.get(cw);\r\n        const projects = _(cwRecords)\r\n          .map((r) => (r.project ? r.project : { name: r.name, psp: \"\" }))\r\n          .uniqBy(\"name\")\r\n          .value();\r\n        const byProject = _(cwRecords).groupBy(\"name\");\r\n        return (\r\n          <>\r\n            <h5 style={{ marginLeft: 8 }}>CW{cw}</h5>\r\n            <TableContainer component={Paper} sx={{ margin: 1, width: (theme) => `calc(100% - ${theme.spacing(2)})` }}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>PSP</TableCell>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell></TableCell>\r\n                    <TableCell>Mo</TableCell>\r\n                    <TableCell>Tu</TableCell>\r\n                    <TableCell>We</TableCell>\r\n                    <TableCell>Th</TableCell>\r\n                    <TableCell>Fr</TableCell>\r\n                    <TableCell></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {projects.map((project) => {\r\n                    const records = byProject.get(project.name);\r\n                    const daySums = [0, 0, 0, 0, 0, 0, 0];\r\n                    for (const record of records) {\r\n                      const day = new Date(record.recordedDate).getDay() - 1; // 0 == sunday\r\n                      daySums[day] += record.recordedTime;\r\n                    }\r\n                    const dayStrings = daySums.map((sum) =>\r\n                      (Math.round(moment.duration(sum, \"milliseconds\").asHours() * 10) / 10).toLocaleString()\r\n                    );\r\n                    return (\r\n                      <TableRow key={project.name}>\r\n                        <TableCell>{project.psp}</TableCell>\r\n                        <TableCell>{project.name}</TableCell>\r\n                        <TableCell></TableCell>\r\n                        <TableCell>{dayStrings[0]}</TableCell>\r\n                        <TableCell>{dayStrings[1]}</TableCell>\r\n                        <TableCell>{dayStrings[2]}</TableCell>\r\n                        <TableCell>{dayStrings[3]}</TableCell>\r\n                        <TableCell>{dayStrings[4]}</TableCell>\r\n                        <TableCell>\r\n                          <Tooltip title=\"Copy Values\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                navigator.clipboard.writeText(\r\n                                  `${dayStrings[0]}\\t${dayStrings[1]}\\t${dayStrings[2]}\\t${dayStrings[3]}\\t${dayStrings[4]}`\r\n                                );\r\n                                setSnackBarOpen(true);\r\n                              }}\r\n                            >\r\n                              <ContentCopyIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Copy PSP and Values\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                navigator.clipboard.writeText(\r\n                                  `${project.psp}\\t\\t\\t${dayStrings[0]}\\t${dayStrings[1]}\\t${dayStrings[2]}\\t${dayStrings[3]}\\t${dayStrings[4]}`\r\n                                );\r\n                                setSnackBarOpen(true);\r\n                              }}\r\n                            >\r\n                              <FileCopyIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <Snackbar open={snackBarOpen} onClose={() => setSnackBarOpen(false)} message=\"Copied to Clipboard\" />\r\n          </>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import { Card, CardContent, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Project } from \"./App\";\r\n\r\nexport const ProjectCard = ({\r\n  onClicked: createTimer,\r\n  project,\r\n}: {\r\n  onClicked: (project: Project) => void;\r\n  project: Project;\r\n}) => {\r\n  return (\r\n    <Card\r\n      onClick={() => createTimer(project)}\r\n      sx={{ margin: 1, height: 150, width: 150, cursor: \"pointer\" }}\r\n      key={project.psp}\r\n    >\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {project.name}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport ArchiveIcon from \"@mui/icons-material/Archive\";\r\nimport UnarchiveIcon from \"@mui/icons-material/Unarchive\";\r\nimport { Record } from \"./App\";\r\n\r\nexport function RecordTable({\r\n  records,\r\n  onDelete,\r\n  onArchive,\r\n}: {\r\n  records: Record[];\r\n  onDelete: (record: Record) => void;\r\n  onArchive: (record: Record, archive: boolean) => void;\r\n}) {\r\n  const [showArchived, setShowArchived] = useState<boolean>(false);\r\n  return (\r\n    <TableContainer component={Paper} sx={{ margin: 1, width: (theme) => `calc(100% - ${theme.spacing(2)})` }}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Dauer</TableCell>\r\n            <TableCell>Gespeichert am</TableCell>\r\n            <TableCell>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={showArchived} onChange={() => setShowArchived((x) => !x)}></Checkbox>}\r\n                label=\"Show Archived\"\r\n              />\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {records\r\n            .filter((r) => showArchived || !r.archived)\r\n            .map((record) => {\r\n              return (\r\n                <TableRow key={record.id}>\r\n                  <TableCell>{record.name}</TableCell>\r\n                  <TableCell>\r\n                    {Math.round(moment.duration(record.recordedTime, \"milliseconds\").asHours() * 10) / 10} h\r\n                  </TableCell>\r\n                  <TableCell> CW {moment(new Date(record.recordedDate)).format(\"WW DD.MM.yyyy HH:mm\")}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton onClick={() => onDelete(record)}>\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                    {record.archived ? (\r\n                      <IconButton onClick={() => onArchive(record, false)}>\r\n                        <UnarchiveIcon />\r\n                      </IconButton>\r\n                    ) : (\r\n                      <IconButton onClick={() => onArchive(record, true)}>\r\n                        <ArchiveIcon />\r\n                      </IconButton>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport { Card, CardContent, IconButton, TextField } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { TimerCard } from \"./TimerCard\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { Report } from \"./Report\";\nimport { ProjectCard } from \"./ProjectCard\";\nimport { RecordTable } from \"./RecordTable\";\n\nexport interface Record {\n  id: number;\n  name: string;\n  recordedTime: number;\n  recordedDate: number;\n  project?: Project;\n  archived?: boolean;\n}\n\nexport interface Project {\n  psp: string;\n  name: string;\n}\n\nexport interface Timer {\n  id: number;\n  name: string;\n  elapsedTime: number;\n  startTime: number;\n  paused: boolean;\n  project?: Project;\n}\n\nfunction App() {\n  const [timers, setTimers] = useState<Timer[]>([]);\n  const [records, setRecords] = useState<Record[]>([]);\n  const [newName, setNewName] = useState<string>(\"\");\n  const [buttonEnabled, setButtonEnabled] = useState<boolean>(false);\n  const [nextId, setNextId] = useState<number>(0);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [projectName, setProjectName] = useState<string>(\"\");\n  const [projectPsp, setProjectPsp] = useState<string>(\"\");\n  const [projectButtonEnabled, setProjectButtonEnabled] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (timers.length > 0 || records.length > 0) {\n      localStorage.setItem(\n        \"timerData\",\n        JSON.stringify({ storageTimers: timers, storageRecords: records, storageId: nextId })\n      );\n    }\n  }, [timers, records, nextId]);\n  useEffect(() => {\n    let timerData = localStorage.getItem(\"timerData\");\n    if (timerData) {\n      let { storageTimers, storageRecords, storageId } = JSON.parse(timerData) as {\n        storageTimers: Timer[];\n        storageRecords: Record[];\n        storageId: number;\n      };\n      setTimers(storageTimers);\n      setNextId(storageId);\n      setRecords(storageRecords);\n    }\n    const projectData = localStorage.getItem(\"projectData\");\n    if (projectData) {\n      let { projects } = JSON.parse(projectData) as { projects: Project[] };\n      setProjects(projects);\n    }\n  }, [setTimers, setRecords, setNextId, setProjects]);\n\n  useEffect(() => {\n    if (projects.length > 0) localStorage.setItem(\"projectData\", JSON.stringify({ projects }));\n  }, [projects]);\n\n  const createTimer = (project?: Project) => {\n    setTimers((curTimers) => {\n      const newTimer: Timer = {\n        id: nextId,\n        name: newName,\n        paused: false,\n        elapsedTime: 0,\n        startTime: new Date().getTime(),\n      };\n      if (project) {\n        newTimer.name = project.name;\n        newTimer.project = project;\n        setProjects((pjs) => {\n          const moved = pjs.filter((pj) => pj.psp !== project.psp);\n          moved.push(project);\n          return moved;\n        });\n      }\n      setNewName(\"\");\n      setNextId((nid) => nid + 1);\n      return curTimers.concat(newTimer);\n    });\n  };\n\n  const createProject = () => {\n    const newProject: Project = {\n      name: projectName,\n      psp: projectPsp,\n    };\n    setProjectPsp(\"\");\n    setProjectName(\"\");\n    setProjects((pjs) => pjs.concat(newProject));\n  };\n  const nameChanged = (value: string) => {\n    setButtonEnabled(value.trim().length > 0);\n    setNewName(value);\n  };\n\n  const projectNameChanged = (value: string) => {\n    setProjectButtonEnabled(value.trim().length > 0 && projectPsp.length > 0);\n    setProjectName(value.trim());\n  };\n\n  const projectPspChanged = (value: string) => {\n    setProjectButtonEnabled(value.trim().length > 0 && projectName.length > 0);\n    setProjectPsp(value.trim());\n  };\n  const onChange = (timer: Timer) => {\n    const changedIndex = timers.findIndex((t) => t.id === timer.id);\n    if (changedIndex > -1) {\n      const timersChanged = timers.slice(0);\n      timersChanged[changedIndex] = timer;\n      setTimers(timersChanged);\n    }\n  };\n\n  const onStop = (timer: Timer) => {\n    setTimers(timers.filter((t) => t.id !== timer.id));\n    setRecords((recs) =>\n      recs.concat({\n        id: timer.id,\n        name: timer.name,\n        recordedTime: timer.elapsedTime,\n        recordedDate: new Date().getTime(),\n        project: timer.project,\n      })\n    );\n  };\n\n  const deleteRecord = (record: Record) => {\n    setRecords((recs) => recs.filter((rec) => rec.id !== record.id));\n  };\n\n  const archiveRecord = (record: Record, archive: boolean) => {\n    record.archived = archive;\n    const changedIndex = records.findIndex((r) => r.id === record.id);\n    if (changedIndex > -1) {\n      const recordsChanged = records.slice(0);\n      recordsChanged[changedIndex] = record;\n      setRecords(recordsChanged);\n    }\n  };\n  return (\n    <>\n      <h2 style={{ marginLeft: 8 }}>Projects</h2>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <Card sx={{ margin: 1, width: 316 }}>\n          <CardContent>\n            <TextField\n              label=\"Project Name\"\n              variant=\"standard\"\n              value={projectName}\n              onChange={(e) => projectNameChanged(e.target.value)}\n            />\n            <TextField\n              label=\"PSP-Element\"\n              variant=\"standard\"\n              value={projectPsp}\n              onChange={(e) => projectPspChanged(e.target.value)}\n            />\n            <IconButton onClick={() => createProject()} disabled={!projectButtonEnabled}>\n              <AddIcon />\n            </IconButton>\n          </CardContent>\n        </Card>\n        {projects\n          .slice(0) //copy\n          .reverse()\n          .map((project) => (\n            <ProjectCard onClicked={createTimer} project={project} />\n          ))}\n      </div>\n      <h2 style={{ marginLeft: 8 }}>Timers</h2>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <Card sx={{ margin: 1, width: 316 }}>\n          <CardContent>\n            <TextField label=\"Name\" variant=\"standard\" value={newName} onChange={(e) => nameChanged(e.target.value)} />\n            <IconButton onClick={() => createTimer()} disabled={!buttonEnabled}>\n              <PlayArrowIcon />\n            </IconButton>\n          </CardContent>\n        </Card>\n        {timers.map((timer) => (\n          <TimerCard key={timer.id} {...timer} onChange={onChange} onStop={onStop} />\n        ))}\n      </div>\n      <RecordTable records={records} onDelete={deleteRecord} onArchive={archiveRecord} />\n      <Report records={records}></Report>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { FC, useEffect } from \"react\";\r\nimport { Snackbar, Button } from \"@mui/material\";\r\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\r\n\r\nconst ServiceWorkerWrapper: FC = () => {\r\n  const [showReload, setShowReload] = React.useState(false);\r\n  const [waitingWorker, setWaitingWorker] = React.useState<ServiceWorker | null>(null);\r\n\r\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\r\n    setShowReload(true);\r\n    setWaitingWorker(registration.waiting);\r\n  };\r\n\r\n  useEffect(() => {\r\n    serviceWorker.register({ onUpdate: onSWUpdate });\r\n  }, []);\r\n\r\n  const reloadPage = () => {\r\n    waitingWorker?.postMessage({ type: \"SKIP_WAITING\" });\r\n    setShowReload(false);\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={showReload}\r\n      message=\"A new version is available!\"\r\n      onClick={reloadPage}\r\n      anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n      action={\r\n        <Button color=\"inherit\" size=\"small\" onClick={reloadPage}>\r\n          Reload\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ServiceWorkerWrapper;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ServiceWorkerWrapper from \"./ServiceWorkerWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ServiceWorkerWrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}